// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
const tg = window.Telegram.WebApp;
tg.expand(); // –†–∞—Å—à–∏—Ä—è–µ–º –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    initApp();
});

// –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentUser = null;
let categories = [];
let popularProducts = [];
let currentCategory = null;
let currentProduct = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initApp() {
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–ª–æ–∞–¥–µ—Ä
        showLoader();
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
        initTelegramUser();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        loadPage('home');
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        setupNavigation();
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–ª–æ–∞–¥–µ—Ä –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        hideLoader();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        setTimeout(() => {
            telegram.showNotification(`–ü—Ä–∏–≤–µ—Ç, ${currentUser.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ TutBabki.`);
        }, 1000);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
function initTelegramUser() {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
    const user = telegram.getUser();
    
    if (user) {
        // –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram WebApp
        currentUser = user;
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram WebApp:', currentUser);
    } else {
        // –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤–Ω–µ Telegram
        console.warn('‚ö†Ô∏è WebApp –Ω–µ –≤ Telegram –∏–ª–∏ initData –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        console.warn('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è ID: 7934395190');
        
        currentUser = {
            id: 7934395190, // ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            first_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
            last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            username: 'test_user',
            language_code: 'ru'
        };
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', currentUser);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ API
    loadUserData(currentUser.id);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadUserData(userId) {
    try {
        showLoader();
        
        // –ó–∞–ø—Ä–æ—Å –∫ API
        const userData = await api.getUserData(userId);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        updateUserInterface(userData);
        
        hideLoader();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        hideLoader();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        loadMockUserData();
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function loadMockUserData() {
    try {
        const mockData = {
            balance: 2500,
            totalEarned: 5800,
            refCount: 3,
            categories: [
                {id: 1, name: '–ö—Ä–µ–¥–∏—Ç–Ω—ã–µ –∫–∞—Ä—Ç—ã', icon: 'üí≥'},
                {id: 2, name: '–î–µ–±–µ—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã', icon: 'üí∞'},
                {id: 3, name: '–ò–ø–æ—Ç–µ–∫–∞', icon: 'üè†'},
                {id: 4, name: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', icon: 'üìà'}
            ],
            popularProducts: [
                {id: 1, name: '–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫ 100 –¥–Ω–µ–π', reward: 3000, image: 'https://alfabank.ru/f/media/logo.png'},
                {id: 2, name: '–¢–∏–Ω—å–∫–æ—Ñ—Ñ Black', reward: 2500, image: 'https://acdn.tinkoff.ru/static/pages/files/8b969c4e-3.jpg'},
                {id: 3, name: '–°–±–µ—Ä –°–±–µ—Ä–ü—Ä–∞–π–º', reward: 1800, image: 'https://sber.ru/logo.png'},
                {id: 4, name: '–í–¢–ë –ú—É–ª—å—Ç–∏–∫–∞—Ä—Ç–∞', reward: 1500, image: 'https://vtb.ru/logo.png'}
            ]
        };

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        updateUserInterface(mockData);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function updateUserInterface(userData) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
    const nameElement = document.getElementById('user-name');
    if (nameElement) {
        nameElement.textContent = currentUser.first_name;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    updateStats(userData, 'user');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø—Ä–æ–¥—É–∫—Ç—ã
    categories = userData.categories;
    popularProducts = userData.popularProducts;

    // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    renderCategories(categories);
    // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    renderPopularProducts(popularProducts);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    setupReferralLink();
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
function setupReferralLink() {
    const refLink = document.getElementById('referral-link');
    const copyRefButton = document.getElementById('copy-referral-button');
    const shareRefButton = document.getElementById('share-referral-button');
    
    if (refLink) {
        const link = `https://t.me/TutBabkiBot?start=${currentUser.id}`;
        refLink.value = link;
    }
    
    if (copyRefButton) {
        copyRefButton.addEventListener('click', function() {
            copyToClipboard(refLink.value);
            telegram.showNotification('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
        });
    }
    
    if (shareRefButton) {
        shareRefButton.addEventListener('click', function() {
            const link = refLink.value;
            const text = `–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ TutBabki –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤! ${link}`;
            
            telegram.sendData(`share_ref_link:${currentUser.id}`);
            
            // –í —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —à–∞—Ä–∏–Ω–≥
            if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
                if (navigator.share) {
                    navigator.share({
                        title: 'TutBabki - –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö',
                        text: text,
                        url: link
                    });
                } else {
                    telegram.shareLink(link);
                }
            }
        });
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
function updateStats(userData, prefix = 'user') {
    const balanceElement = document.getElementById(`${prefix}-balance`);
    const earnedElement = document.getElementById(`${prefix}-earned`);
    const refsElement = document.getElementById(`${prefix}-refs`);
    
    if (balanceElement) balanceElement.textContent = `${userData.balance}‚ÇΩ`;
    if (earnedElement) earnedElement.textContent = `${userData.totalEarned}‚ÇΩ`;
    if (refsElement) refsElement.textContent = userData.refCount;
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function renderCategories(categories) {
    const categoriesContainer = document.getElementById('categories-list');
    if (!categoriesContainer) return;

    categoriesContainer.innerHTML = categories.map(category => `
        <div class="category-card" data-id="${category.id}" onclick="loadCategoryProducts(${category.id})">
            <div class="category-icon">${category.icon}</div>
            <div class="category-name">${category.name}</div>
        </div>
    `).join('');
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
function renderPopularProducts(products) {
    const productsContainer = document.getElementById('popular-products');
    if (!productsContainer) return;

    productsContainer.innerHTML = products.map(product => `
        <div class="product-card" data-id="${product.id}" onclick="loadProductDetails(${product.id})">
            <div class="product-image" style="background-image: url('${product.image}')"></div>
            <div class="product-info">
                <div class="product-name">${product.name}</div>
                <div class="product-reward">–ù–∞–≥—Ä–∞–¥–∞: ${product.reward}‚ÇΩ</div>
            </div>
        </div>
    `).join('');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function loadPage(pageName) {
    const contentContainer = document.getElementById('content');
    const templateId = `${pageName}-template`;
    const template = document.getElementById(templateId);
    
    if (!template) {
        console.error(`–®–∞–±–ª–æ–Ω ${templateId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return;
    }
    
    // –ö–ª–æ–Ω–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω
    const pageContent = template.content.cloneNode(true);
    
    // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    contentContainer.innerHTML = '';
    contentContainer.appendChild(pageContent);
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const navButtons = document.querySelectorAll('.nav-button');
    navButtons.forEach(btn => {
        btn.classList.toggle('active', btn.dataset.page === pageName);
    });
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" Telegram
    if (pageName === 'home') {
        telegram.hideBackButton();
    } else {
        telegram.showBackButton(() => {
            loadPage('home');
        });
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    switch(pageName) {
        case 'home':
            initHomePage();
            break;
        case 'catalog':
            initCatalogPage();
            break;
        case 'profile':
            initProfilePage();
            break;
        case 'product':
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ loadProductDetails
            break;
    }
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞
    contentContainer.classList.add('fade-in');
    setTimeout(() => {
        contentContainer.classList.remove('fade-in');
    }, 300);
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–µ—Ä—Ö
    window.scrollTo(0, 0);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–º–∞—à–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function initHomePage() {
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º UI
    if (categories.length > 0) {
        renderCategories(categories);
        renderPopularProducts(popularProducts);
    }
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    setupReferralLink();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ç–∞–ª–æ–≥–∞
function initCatalogPage() {
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if (categories.length > 0) {
        renderCategoryTabs();
        
        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ—ë –ø—Ä–æ–¥—É–∫—Ç—ã
        if (currentCategory) {
            api.getCategoryProducts(currentCategory.id)
                .then(products => renderCategoryProducts(products))
                .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', error);
                    showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã');
                });
        } else {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
            api.getCategoryProducts(0)  // 0 = –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                .then(products => renderCategoryProducts(products))
                .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', error);
                    showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã');
                });
        }
    }
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–∏—Å–∫
    const searchButton = document.getElementById('search-button');
    const searchInput = document.getElementById('search-input');
    
    if (searchButton && searchInput) {
        searchButton.addEventListener('click', function() {
            const query = searchInput.value.trim();
            if (query) {
                searchProducts(query);
            }
        });
        
        searchInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                const query = searchInput.value.trim();
                if (query) {
                    searchProducts(query);
                }
            }
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª—è
function initProfilePage() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const profileName = document.getElementById('profile-name');
    
    if (profileName) {
        profileName.textContent = `${currentUser.first_name} ${currentUser.last_name || ''}`.trim();
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    if (document.getElementById('profile-balance')) {
        updateStats({
            balance: document.getElementById('user-balance')?.textContent.replace('‚ÇΩ', '') || '0',
            totalEarned: document.getElementById('user-earned')?.textContent.replace('‚ÇΩ', '') || '0',
            refCount: document.getElementById('user-refs')?.textContent || '0'
        }, 'profile');
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    loadTransactions();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
    const withdrawalButton = document.getElementById('withdrawal-button');
    if (withdrawalButton) {
        withdrawalButton.addEventListener('click', function() {
            const balance = parseInt(document.getElementById('profile-balance').textContent) || 0;
            
            if (balance < 1000) {
                telegram.showNotification('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 1000‚ÇΩ. –ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ –±–æ–ª—å—à–µ, —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞.');
                return;
            }
            
            telegram.showConfirm(`–í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ ${balance}‚ÇΩ –Ω–∞ –≤–∞—à —Å—á–µ—Ç?`, (confirmed) => {
                if (confirmed) {
                    telegram.sendData(`withdraw:${balance}`);
                    telegram.showNotification('–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
                }
            });
        });
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
async function loadTransactions() {
    try {
        const transactionsList = document.getElementById('transactions-list');
        if (!transactionsList) return;
        
        showLoader();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const transactions = await api.getUserTransactions(currentUser.id);
        
        if (transactions.length === 0) {
            transactionsList.innerHTML = `
                <div class="empty-state">
                    <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</p>
                </div>
            `;
        } else {
            transactionsList.innerHTML = transactions.map(transaction => `
                <div class="transaction-item">
                    <div class="transaction-header">
                        <div class="transaction-name">${transaction.product}</div>
                        <div class="transaction-amount ${transaction.status === 'approved' ? 'positive' : ''}">
                            ${transaction.status === 'approved' ? '+' : ''}${transaction.amount}‚ÇΩ
                        </div>
                    </div>
                    <div class="transaction-footer">
                        <div class="transaction-date">${transaction.date}</div>
                        <div class="transaction-status status-${transaction.status}">
                            ${getStatusText(transaction.status)}
                        </div>
                    </div>
                </div>
            `).join('');
        }
        
        hideLoader();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
        hideLoader();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        const transactionsList = document.getElementById('transactions-list');
        if (transactionsList) {
            transactionsList.innerHTML = `
                <div class="transaction-item">
                    <div class="transaction-header">
                        <div class="transaction-name">–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫ 100 –¥–Ω–µ–π</div>
                        <div class="transaction-amount positive">+3000‚ÇΩ</div>
                    </div>
                    <div class="transaction-footer">
                        <div class="transaction-date">15.10.2023</div>
                        <div class="transaction-status status-approved">–û–¥–æ–±—Ä–µ–Ω–æ</div>
                    </div>
                </div>
                <div class="transaction-item">
                    <div class="transaction-header">
                        <div class="transaction-name">–¢–∏–Ω—å–∫–æ—Ñ—Ñ Black</div>
                        <div class="transaction-amount">2500‚ÇΩ</div>
                    </div>
                    <div class="transaction-footer">
                        <div class="transaction-date">20.10.2023</div>
                        <div class="transaction-status status-pending">–û–∂–∏–¥–∞–Ω–∏–µ</div>
                    </div>
                </div>
            `;
        }
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
function getStatusText(status) {
    switch (status) {
        case 'approved':
            return '–û–¥–æ–±—Ä–µ–Ω–æ';
        case 'pending':
            return '–û–∂–∏–¥–∞–Ω–∏–µ';
        case 'rejected':
            return '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ';
        default:
            return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤–∫–ª–∞–¥–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function renderCategoryTabs() {
    const tabsContainer = document.getElementById('categories-tabs');
    if (!tabsContainer) return;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    let tabsHTML = `
        <div class="category-tab ${!currentCategory ? 'active' : ''}" 
             data-id="0" onclick="loadCategoryProducts(0)">
            üîç –í—Å–µ
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    tabsHTML += categories.map(category => `
        <div class="category-tab ${currentCategory && category.id === currentCategory.id ? 'active' : ''}" 
             data-id="${category.id}" onclick="loadCategoryProducts(${category.id})">
            ${category.icon} ${category.name}
        </div>
    `).join('');
    
    tabsContainer.innerHTML = tabsHTML;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async function loadCategoryProducts(categoryId) {
    try {
        showLoader();
        
        if (categoryId === 0) {
            // –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            currentCategory = null;
        } else {
            // –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            const category = categories.find(cat => cat.id === categoryId);
            if (!category) throw new Error('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            currentCategory = category;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const products = await api.getCategoryProducts(categoryId);
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–∞—Ç–∞–ª–æ–≥–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –Ω–µ—ë
        if (!document.querySelector('.catalog-page')) {
            loadPage('catalog');
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            renderCategoryTabs();
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
            renderCategoryProducts(products);
        }
        
        hideLoader();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã');
        hideLoader();
    }
}

// –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
async function searchProducts(query) {
    try {
        showLoader();
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        const products = await api.searchProducts(query);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        renderCategoryProducts(products);
        
        hideLoader();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫');
        hideLoader();
    }
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function renderCategoryProducts(products) {
    const productsContainer = document.getElementById('products-grid');
    if (!productsContainer) return;
    
    if (products.length === 0) {
        productsContainer.innerHTML = `
            <div class="empty-state">
                <p>–ü—Ä–æ–¥—É–∫—Ç—ã –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
            </div>
        `;
        return;
    }
    
    productsContainer.innerHTML = products.map(product => `
        <div class="product-card" data-id="${product.id}" onclick="loadProductDetails(${product.id})">
            <div class="product-image" style="background-image: url('${product.image}')"></div>
            <div class="product-info">
                <div class="product-name">${product.name}</div>
                <div class="product-reward">–ù–∞–≥—Ä–∞–¥–∞: ${product.reward}‚ÇΩ</div>
            </div>
        </div>
    `).join('');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∞
async function loadProductDetails(productId) {
    try {
        showLoader();
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∫–ª–∏–∫
        await api.logProductClick(productId, currentUser.id);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
        const product = await api.getProductDetails(productId);
        currentProduct = product;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ–¥—É–∫—Ç–∞
        loadPage('product');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        document.getElementById('product-name').textContent = product.name;
        document.getElementById('product-reward').textContent = `–ù–∞–≥—Ä–∞–¥–∞: ${product.reward}‚ÇΩ`;
        document.getElementById('product-description').textContent = product.description;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const imageElement = document.getElementById('product-image');
        imageElement.style.backgroundImage = `url('${product.image}')`;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        const requirementsElement = document.getElementById('product-requirements');
        requirementsElement.innerHTML = product.requirements.map(req => `
            <li>${req}</li>
        `).join('');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        const refLinkElement = document.getElementById('referral-link-display');
        refLinkElement.value = product.refLink;
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        setupProductButtons(product);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        const backButton = document.getElementById('back-to-catalog');
        if (backButton) {
            backButton.addEventListener('click', function() {
                loadPage('catalog');
            });
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–Ω–æ–ø–∫—É Telegram
        telegram.setMainButton('–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É', () => {
            telegram.sendData(`get_ref_link:${productId}`);
            
            // –î—É–±–ª–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            copyToClipboard(product.refLink);
            telegram.showNotification('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à —á–∞—Ç');
        });
        
        hideLoader();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∞:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ');
        hideLoader();
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ–¥—É–∫—Ç–∞
function setupProductButtons(product) {
    const copyLinkButton = document.getElementById('copy-link-button');
    const shareLinkButton = document.getElementById('share-link-button');
    
    if (copyLinkButton) {
        copyLinkButton.addEventListener('click', function() {
            copyToClipboard(product.refLink);
            telegram.showNotification('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
        });
    }
    
    if (shareLinkButton) {
        shareLinkButton.addEventListener('click', function() {
            const text = `–†–µ–∫–æ–º–µ–Ω–¥—É—é ${product.name}! –û—Ñ–æ—Ä–º–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å: ${product.refLink}`;
            
            telegram.sendData(`share_product:${product.id}`);
            
            // –í —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —à–∞—Ä–∏–Ω–≥
            if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
                if (navigator.share) {
                    navigator.share({
                        title: product.name,
                        text: text,
                        url: product.refLink
                    });
                } else {
                    telegram.shareLink(product.refLink);
                }
            }
        });
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
function copyToClipboard(text) {
    const textarea = document.createElement('textarea');
    textarea.value = text;
    textarea.style.position = 'fixed';  // –í–∞–∂–Ω–æ –¥–ª—è iOS
    document.body.appendChild(textarea);
    textarea.select();
    
    try {
        document.execCommand('copy');
    } catch (err) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç: ', err);
    }
    
    document.body.removeChild(textarea);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function setupNavigation() {
    const navButtons = document.querySelectorAll('.nav-button');
    navButtons.forEach(button => {
        button.addEventListener('click', function() {
            const page = this.dataset.page;
            loadPage(page);
        });
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–∞–¥–µ—Ä
function showLoader() {
    document.getElementById('loader').style.display = 'flex';
}

// –°–∫—Ä—ã—Ç—å –ª–æ–∞–¥–µ—Ä
function hideLoader() {
    document.getElementById('loader').style.display = 'none';
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
function showError(message) {
    telegram.showAlert(message);
} 